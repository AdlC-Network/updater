{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spigot updater \u00b6 An automated update system for Pterodactyl Minecraft servers and their plugins. Originally made for Left4Craft , this tool integrates with Discord, Pterodactyl, and various other APIs to keep your servers and their plugins up to date with minimal input from owners and admins. What it does \u00b6 This periodically checks your servers and plugins for updates and alerts you through Discord when when it finds a new version. You will be prompted to approve updates and are usually given links to the build/version's changelog. Once per hour it downloads any updates you have approved, then twice a day it will attempt to upload the downloads JARs. Before uploading, it checks each server's player count, and doesn't update unless and admin reacts to a Discord message to approve it. This it to avoid servers being restarted with lots of players online and when there isn't an admin around to fix it if there is an issue after updating. How it works \u00b6 Look at the code if you want to know exactly how it works. You can choose between PaperMC or the ServerJars API for your servers. Plugins can be sourced from GitHub Releases, a Jenkins build server, or SpigotMC. The server is automatically stopped before and started after uploading, to avoid corruption. Limitations \u00b6 You can't update a plugin on some servers and not others (except if you have servers with different Minecraft versions, you could have multiple plugins from the same source). Installation & setup \u00b6 Installation and configuration . Support \u00b6 Donate \u00b6 Sponsor this project at left4craft.org/shop .","title":"Home"},{"location":"#spigot-updater","text":"An automated update system for Pterodactyl Minecraft servers and their plugins. Originally made for Left4Craft , this tool integrates with Discord, Pterodactyl, and various other APIs to keep your servers and their plugins up to date with minimal input from owners and admins.","title":"Spigot updater"},{"location":"#what-it-does","text":"This periodically checks your servers and plugins for updates and alerts you through Discord when when it finds a new version. You will be prompted to approve updates and are usually given links to the build/version's changelog. Once per hour it downloads any updates you have approved, then twice a day it will attempt to upload the downloads JARs. Before uploading, it checks each server's player count, and doesn't update unless and admin reacts to a Discord message to approve it. This it to avoid servers being restarted with lots of players online and when there isn't an admin around to fix it if there is an issue after updating.","title":"What it does"},{"location":"#how-it-works","text":"Look at the code if you want to know exactly how it works. You can choose between PaperMC or the ServerJars API for your servers. Plugins can be sourced from GitHub Releases, a Jenkins build server, or SpigotMC. The server is automatically stopped before and started after uploading, to avoid corruption.","title":"How it works"},{"location":"#limitations","text":"You can't update a plugin on some servers and not others (except if you have servers with different Minecraft versions, you could have multiple plugins from the same source).","title":"Limitations"},{"location":"#installation-setup","text":"Installation and configuration .","title":"Installation &amp; setup"},{"location":"#support","text":"","title":"Support"},{"location":"#donate","text":"Sponsor this project at left4craft.org/shop .","title":"Donate"},{"location":"installation/","text":"Installation \u00b6 Requirements \u00b6 Node.JS >=14.x A MySQL or MariaDB database Minecraft servers running on Pterodactyl Instructions \u00b6 For hosting on Pterodactyl \u00b6 Create a new server with a Node.JS egg , using this repository Set the \"Bot js file\" to src/index.js On the host machine, create a new file called Dockerfile : FROM node:lts-slim # Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others) # Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer # installs, work. RUN apt-get update \\ && apt-get install -y wget gnupg git \\ && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\ && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\ && apt-get update \\ && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \\ --no-install-recommends \\ && rm -rf /var/lib/apt/lists/* USER container ENV USER=container HOME=/home/container WORKDIR /home/container COPY ./entrypoint.sh /entrypoint.sh CMD [\"/bin/bash\", \"/entrypoint.sh\"] Copy the nodejs entrypoint.sh file into the same directory as Dockerfile, and save it as entrypoint.sh #!/bin/ash cd /home/container # Make internal Docker IP address available to processes. export INTERNAL_IP=`ip route get 1 | awk '{print $NF;exit}'` # Replace Startup Variables MODIFIED_STARTUP=`eval echo $(echo ${STARTUP} | sed -e 's/{{/${/g' -e 's/}}/}/g')` echo \":/home/container$ ${MODIFIED_STARTUP}\" # Run the Server eval ${MODIFIED_STARTUP} Build the docker image: docker build -t puppeteer-chrome-linux . In your server's startup settings, change the docker image to puppeteer-chrome-linux:latest Configure For standalone hosting \u00b6 Clone this repository Install dependencies with npm i Start with npm start or node src/ Configure","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Node.JS >=14.x A MySQL or MariaDB database Minecraft servers running on Pterodactyl","title":"Requirements"},{"location":"installation/#instructions","text":"","title":"Instructions"},{"location":"installation/#for-hosting-on-pterodactyl","text":"Create a new server with a Node.JS egg , using this repository Set the \"Bot js file\" to src/index.js On the host machine, create a new file called Dockerfile : FROM node:lts-slim # Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others) # Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer # installs, work. RUN apt-get update \\ && apt-get install -y wget gnupg git \\ && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\ && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\ && apt-get update \\ && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \\ --no-install-recommends \\ && rm -rf /var/lib/apt/lists/* USER container ENV USER=container HOME=/home/container WORKDIR /home/container COPY ./entrypoint.sh /entrypoint.sh CMD [\"/bin/bash\", \"/entrypoint.sh\"] Copy the nodejs entrypoint.sh file into the same directory as Dockerfile, and save it as entrypoint.sh #!/bin/ash cd /home/container # Make internal Docker IP address available to processes. export INTERNAL_IP=`ip route get 1 | awk '{print $NF;exit}'` # Replace Startup Variables MODIFIED_STARTUP=`eval echo $(echo ${STARTUP} | sed -e 's/{{/${/g' -e 's/}}/}/g')` echo \":/home/container$ ${MODIFIED_STARTUP}\" # Run the Server eval ${MODIFIED_STARTUP} Build the docker image: docker build -t puppeteer-chrome-linux . In your server's startup settings, change the docker image to puppeteer-chrome-linux:latest Configure","title":"For hosting on Pterodactyl"},{"location":"installation/#for-standalone-hosting","text":"Clone this repository Install dependencies with npm i Start with npm start or node src/ Configure","title":"For standalone hosting"},{"location":"configuration/config/","text":"Config \u00b6 The general configuration file, config/config.js . Options \u00b6 server server_name \u00b6 The name of your Minecraft server. color color \u00b6 Your primary colour, used in Discord message embeds. channel_id channel_id \u00b6 The ID of a channel in your Discord server that will be used for update messages. Only admins should have access to this channel. server_jars_api server_jars_api \u00b6 The API you want to use to get updates and downloads for server jars (spigot, paper, bungeecord, etc). papermc (recommended) Supports major versions only ( 1.15 , 1.16 etc) waterfall paper taverntine serverjars Supports minor versions ( 1.16.1 , 1.16.2 etc) and latest . nukkitx pocketmine magma mohist travertine bungeecord velocity waterfall bukkit paper spigot snapshot vanilla left4status left4status \u00b6 Optional Used for getting the server count if a server has the left4status property and not the host property. Must be an instance of Left4Status . headless_browser headless_browser \u00b6 Default: true Whether or not the SpigotMC browser should run in headless mode. download_time download_time \u00b6 Default: 10000 Number of milliseconds to wait for plugins to download from SpigotMC. Include at least an additional 5 seconds (5000) for Cloudflare. 10 seconds should be ok for fast connections. save_logs save_logs \u00b6 Default: true Save log files to logs/ ? debug debug \u00b6 Default: false Enable additional debug logging?","title":"Config"},{"location":"configuration/config/#config","text":"The general configuration file, config/config.js .","title":"Config"},{"location":"configuration/config/#options","text":"server","title":"Options"},{"location":"configuration/config/#server_name","text":"The name of your Minecraft server. color","title":"server_name"},{"location":"configuration/config/#color","text":"Your primary colour, used in Discord message embeds. channel_id","title":"color"},{"location":"configuration/config/#channel_id","text":"The ID of a channel in your Discord server that will be used for update messages. Only admins should have access to this channel. server_jars_api","title":"channel_id"},{"location":"configuration/config/#server_jars_api","text":"The API you want to use to get updates and downloads for server jars (spigot, paper, bungeecord, etc). papermc (recommended) Supports major versions only ( 1.15 , 1.16 etc) waterfall paper taverntine serverjars Supports minor versions ( 1.16.1 , 1.16.2 etc) and latest . nukkitx pocketmine magma mohist travertine bungeecord velocity waterfall bukkit paper spigot snapshot vanilla left4status","title":"server_jars_api"},{"location":"configuration/config/#left4status","text":"Optional Used for getting the server count if a server has the left4status property and not the host property. Must be an instance of Left4Status . headless_browser","title":"left4status"},{"location":"configuration/config/#headless_browser","text":"Default: true Whether or not the SpigotMC browser should run in headless mode. download_time","title":"headless_browser"},{"location":"configuration/config/#download_time","text":"Default: 10000 Number of milliseconds to wait for plugins to download from SpigotMC. Include at least an additional 5 seconds (5000) for Cloudflare. 10 seconds should be ok for fast connections. save_logs","title":"download_time"},{"location":"configuration/config/#save_logs","text":"Default: true Save log files to logs/ ? debug","title":"save_logs"},{"location":"configuration/config/#debug","text":"Default: false Enable additional debug logging?","title":"debug"},{"location":"configuration/env/","text":"ENV \u00b6 Rename example.env to .env . It should look like this: DISCORD_TOKEN= DB_HOST= DB_USER= DB_PASS= DB_NAME= PTERO_HOST= PTERO_CLIENT_KEY= SPIGOT_EMAIL= SPIGOT_PASSWORD= Options \u00b6 DISCORD_TOKEN DISCORD_TOKEN \u00b6 Create a new bot application on the Discord Developer Portal and copy the token. DB_HOST DB_HOST \u00b6 You need to create a MySQL or MariaDB database. You don't need to create any tables, it will be done automatically. For a non-standard port, append :port (eg: 127.0.0.1:3306 ) DB_USER DB_USER \u00b6 The database username. DB_PASS DB_PASS \u00b6 The database password. DB_NAME DB_NAME \u00b6 The name of the database. PTERO_HOST PTERO_HOST \u00b6 The address for your Pterodactyl installation - eg: https://panel.example.org PTERO_CLIENT_KEY PTERO_CLIENT_KEY \u00b6 Create a new API key at /account/api (panel.example.org/account/api) SPIGOT_EMAIL SPIGOT_EMAIL \u00b6 Optional Only required if you have premium plugins. The email address for your SpigotMC account. SPIGOT_PASSWORD SPIGOT_PASSWORD \u00b6 Optional Only required if you have premium plugins. The password for your SpigotMC account. 2FA is not supported.","title":"ENV"},{"location":"configuration/env/#env","text":"Rename example.env to .env . It should look like this: DISCORD_TOKEN= DB_HOST= DB_USER= DB_PASS= DB_NAME= PTERO_HOST= PTERO_CLIENT_KEY= SPIGOT_EMAIL= SPIGOT_PASSWORD=","title":"ENV"},{"location":"configuration/env/#options","text":"DISCORD_TOKEN","title":"Options"},{"location":"configuration/env/#discord_token","text":"Create a new bot application on the Discord Developer Portal and copy the token. DB_HOST","title":"DISCORD_TOKEN"},{"location":"configuration/env/#db_host","text":"You need to create a MySQL or MariaDB database. You don't need to create any tables, it will be done automatically. For a non-standard port, append :port (eg: 127.0.0.1:3306 ) DB_USER","title":"DB_HOST"},{"location":"configuration/env/#db_user","text":"The database username. DB_PASS","title":"DB_USER"},{"location":"configuration/env/#db_pass","text":"The database password. DB_NAME","title":"DB_PASS"},{"location":"configuration/env/#db_name","text":"The name of the database. PTERO_HOST","title":"DB_NAME"},{"location":"configuration/env/#ptero_host","text":"The address for your Pterodactyl installation - eg: https://panel.example.org PTERO_CLIENT_KEY","title":"PTERO_HOST"},{"location":"configuration/env/#ptero_client_key","text":"Create a new API key at /account/api (panel.example.org/account/api) SPIGOT_EMAIL","title":"PTERO_CLIENT_KEY"},{"location":"configuration/env/#spigot_email","text":"Optional Only required if you have premium plugins. The email address for your SpigotMC account. SPIGOT_PASSWORD","title":"SPIGOT_EMAIL"},{"location":"configuration/env/#spigot_password","text":"Optional Only required if you have premium plugins. The password for your SpigotMC account. 2FA is not supported.","title":"SPIGOT_PASSWORD"},{"location":"configuration/plugins/","text":"Plugins \u00b6 The plugins configuration file, config/plugins.js . This file should export an object of plugin objects: Spigot { 'Plugin Name' : { source : 'spigot' , resource : Number , zip_path? : String || RegEx , jar : String }, } GitHub { 'Plugin Name' : { source : 'github' , repository : String , asset : String || RegEx , zip_path? : String || RegEx , jar : String }, } Jenkins { 'Plugin Name' : { source : 'jenkins' , host : String , job : String , artifact : String || RegEx , zip_path? : String || RegEx , jar : String }, } Plugin properties \u00b6 source source \u00b6 Required Sources: spigot , github , jenkins Type: String The source of the plugin - one of: spigot github jenkins jar jar \u00b6 Required Sources: spigot , github , jenkins Type: String The filename of the file on the server, like EssentialsX.jar . zip_path zip_path \u00b6 Optional Sources: spigot , github , jenkins Type: String or RegEx The name and location of the file to extract if the plugin download in compressed/zipped. If you know the exact file name, set this to a string ( 'Filename.jar' ). If the file name changes every time, use regex ( /BungeeTabListPlus_BukkitBridge-\\S*\\.jar/g ). resource resource \u00b6 Required Sources: spigot Type: Number The spigot resource ID. This is the number at the end of the URLs: https://www.spigotmc.org/resources/essentialsx.9089 9089 . repository repository \u00b6 Required Sources: github Type: String The GitHub repository of the plugin - org/repo or user/repo . asset asset \u00b6 Required Sources: github Type: String or RegEx The name of the asset to download. If the name of the asset is different every time, you can either use RegEx, or if the name is predictable and included the tag name, you can use the {{tag}} placeholder. host host \u00b6 Required Sources: jenkins Type: String The web address for jenkins instance, like https://ci.example.net . job job \u00b6 Required Sources: jenkins Type: String The name of the CI job. artifact artifact \u00b6 Required Sources: jenkins Type: String or RegEx The name of the artifact to download. If the name of the artifact is different every time, you can either use RegEx, or if the name is predictable and included the build number, you can use the {{build}} placeholder.","title":"Plugins"},{"location":"configuration/plugins/#plugins","text":"The plugins configuration file, config/plugins.js . This file should export an object of plugin objects: Spigot { 'Plugin Name' : { source : 'spigot' , resource : Number , zip_path? : String || RegEx , jar : String }, } GitHub { 'Plugin Name' : { source : 'github' , repository : String , asset : String || RegEx , zip_path? : String || RegEx , jar : String }, } Jenkins { 'Plugin Name' : { source : 'jenkins' , host : String , job : String , artifact : String || RegEx , zip_path? : String || RegEx , jar : String }, }","title":"Plugins"},{"location":"configuration/plugins/#plugin-properties","text":"source","title":"Plugin properties"},{"location":"configuration/plugins/#source","text":"Required Sources: spigot , github , jenkins Type: String The source of the plugin - one of: spigot github jenkins jar","title":"source"},{"location":"configuration/plugins/#jar","text":"Required Sources: spigot , github , jenkins Type: String The filename of the file on the server, like EssentialsX.jar . zip_path","title":"jar"},{"location":"configuration/plugins/#zip_path","text":"Optional Sources: spigot , github , jenkins Type: String or RegEx The name and location of the file to extract if the plugin download in compressed/zipped. If you know the exact file name, set this to a string ( 'Filename.jar' ). If the file name changes every time, use regex ( /BungeeTabListPlus_BukkitBridge-\\S*\\.jar/g ). resource","title":"zip_path"},{"location":"configuration/plugins/#resource","text":"Required Sources: spigot Type: Number The spigot resource ID. This is the number at the end of the URLs: https://www.spigotmc.org/resources/essentialsx.9089 9089 . repository","title":"resource"},{"location":"configuration/plugins/#repository","text":"Required Sources: github Type: String The GitHub repository of the plugin - org/repo or user/repo . asset","title":"repository"},{"location":"configuration/plugins/#asset","text":"Required Sources: github Type: String or RegEx The name of the asset to download. If the name of the asset is different every time, you can either use RegEx, or if the name is predictable and included the tag name, you can use the {{tag}} placeholder. host","title":"asset"},{"location":"configuration/plugins/#host","text":"Required Sources: jenkins Type: String The web address for jenkins instance, like https://ci.example.net . job","title":"host"},{"location":"configuration/plugins/#job","text":"Required Sources: jenkins Type: String The name of the CI job. artifact","title":"job"},{"location":"configuration/plugins/#artifact","text":"Required Sources: jenkins Type: String or RegEx The name of the artifact to download. If the name of the artifact is different every time, you can either use RegEx, or if the name is predictable and included the build number, you can use the {{build}} placeholder.","title":"artifact"},{"location":"configuration/servers/","text":"Servers \u00b6 The servers configuration file, config/servers.js . This file should export an object of server objects: { 'Server Name' : { host? : String , leftstatus? : String , pterodactyl_id : String , jar : { type : String , version : String }, max_players : Number , plugins : String [] }, } Server properties \u00b6 host host \u00b6 Conditionally optional Type: String One of host or left4status is required . The address of this server to be queried for the player count, such as mc.left4craft.org or mc.left4craft.org:25565 . left4status left4status \u00b6 Conditionally optional Type: String One of host or left4status is required . The ID of the server in the response to be returned from Left4Status. If you set this option, you must also set left4status in config.js . This option can be used if your internal servers can not be queried externally. pterodactyl_id pterodactyl_id \u00b6 Type: String The (short) ID of the Pterodactyl server. Used for interfacing with the Pterodactyl API when uploading files. jar jar \u00b6 Type: Object An object describing the server jar. type type \u00b6 Type: String The server type, such as paper , spigot , and bungeecord . Must be a supported server type from the API you chose for server_jars_api in config.js . version version \u00b6 Type: String The server version, such as 1.16 , or for serverjars - 1.16.4 and latest . max_players max_players \u00b6 Type: Number The maximum number of players that can be online for an update to be deemed nonintrusive. plugins plugins \u00b6 Type: Array An array of plugin names that this server uses. Plugin names must match those set in plugins.js exactly . The names are case-sensitive.","title":"Servers"},{"location":"configuration/servers/#servers","text":"The servers configuration file, config/servers.js . This file should export an object of server objects: { 'Server Name' : { host? : String , leftstatus? : String , pterodactyl_id : String , jar : { type : String , version : String }, max_players : Number , plugins : String [] }, }","title":"Servers"},{"location":"configuration/servers/#server-properties","text":"host","title":"Server properties"},{"location":"configuration/servers/#host","text":"Conditionally optional Type: String One of host or left4status is required . The address of this server to be queried for the player count, such as mc.left4craft.org or mc.left4craft.org:25565 . left4status","title":"host"},{"location":"configuration/servers/#left4status","text":"Conditionally optional Type: String One of host or left4status is required . The ID of the server in the response to be returned from Left4Status. If you set this option, you must also set left4status in config.js . This option can be used if your internal servers can not be queried externally. pterodactyl_id","title":"left4status"},{"location":"configuration/servers/#pterodactyl_id","text":"Type: String The (short) ID of the Pterodactyl server. Used for interfacing with the Pterodactyl API when uploading files. jar","title":"pterodactyl_id"},{"location":"configuration/servers/#jar","text":"Type: Object An object describing the server jar. type","title":"jar"},{"location":"configuration/servers/#type","text":"Type: String The server type, such as paper , spigot , and bungeecord . Must be a supported server type from the API you chose for server_jars_api in config.js . version","title":"type"},{"location":"configuration/servers/#version","text":"Type: String The server version, such as 1.16 , or for serverjars - 1.16.4 and latest . max_players","title":"version"},{"location":"configuration/servers/#max_players","text":"Type: Number The maximum number of players that can be online for an update to be deemed nonintrusive. plugins","title":"max_players"},{"location":"configuration/servers/#plugins","text":"Type: Array An array of plugin names that this server uses. Plugin names must match those set in plugins.js exactly . The names are case-sensitive.","title":"plugins"}]}